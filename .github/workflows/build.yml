name: PocketMine-MP plugin builder

on:
  workflow_call:
    inputs:
      php_version:
        description: 'PHP version'
        required: false
        default: '8.2'
        type: string

      use_composer:
        description: 'Whether to install dependencies from composer.json'
        required: true
        type: boolean

      use_virions:
        description: 'Whether to build virions'
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php_version }}
          tools: composer

      - name: Enable Phar writing
        run: |
          PHP_INI_PATH=$(php -i | grep 'Loaded Configuration File' | awk '{print $NF}')
          echo "Using php.ini at: $PHP_INI_PATH"
          echo "phar.readonly=0" >> "$PHP_INI_PATH"

      - name: Download scripts from template repository
        run: |
          git clone --depth=1 https://github.com/Taskov1ch/pmmp-plugin-builder.git temp_repo
          cp -r temp_repo/scripts .
          rm -rf temp_repo

      - name: Read build settings
        run: |
          echo "USE_VIRIONS=${{ inputs.use_virions }}" >> $GITHUB_ENV
          echo "USE_COMPOSER=${{ inputs.use_composer }}" >> $GITHUB_ENV

      - name: Check for virions.yml
        id: check-virions
        run: |
          if [[ -f virions.yml ]]; then
            echo "VIRION_FOUND=true" >> $GITHUB_ENV
          else
            echo "VIRION_FOUND=false" >> $GITHUB_ENV
          fi

      - name: Build virions
        if: env.VIRION_FOUND == 'true' && env.USE_VIRIONS == 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y unzip curl jq yq
          mkdir -p virions

          yq e '.[] | .repo + " " + .src' virions.yml | while read -r repo src; do
            echo "Processing virion: $repo..."

            repo_info=$(curl -s "https://api.github.com/repos/$repo")

            if echo "$repo_info" | jq -e '.message == "Not Found"' &>/dev/null; then
              echo "Warning: Repository $repo not found, skipping..."
              continue
            fi

            branch=$(echo "$repo_info" | jq -r '.default_branch // "main"')
            repo_url="https://github.com/$repo/archive/refs/heads/$branch.zip"

            curl -L "$repo_url" -o repo.zip
            unzip repo.zip -d repo && rm repo.zip

            extracted_path=$(find repo -mindepth 1 -maxdepth 1 -type d | head -n 1)/"$src"

            if [ ! -d "$extracted_path" ]; then
              echo "Error: Directory $src not found in $repo, skipping..."
              continue
            fi

            cp scripts/virion_build.php "$extracted_path/build.php"
            (cd "$extracted_path" && php build.php)

            if [ ! -f "$extracted_path/virion.phar" ]; then
              echo "Error: virion.phar not created for $repo, skipping..."
              continue
            fi

            mv "$extracted_path/virion.phar" "virions/$(basename "$repo").phar"
            rm -rf repo
          done

      - name: Install dependencies if composer.json exists
        if: env.USE_COMPOSER == 'true'
        run: |
          if [[ -f composer.json ]]; then
            composer install --no-dev --optimize-autoloader
          fi

      - name: Build plugin
        run: |
          cp scripts/plugin_build.php ./build.php
          php build.php

      - name: Verify plugin.phar exists
        run: |
          if [[ ! -f plugin.phar ]]; then
            echo "Error: plugin.phar not found!"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin.phar
          path: plugin.phar

      - name: Set output artifact URL
        id: set-artifact-url
        run: echo "artifact_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" >> $GITHUB_ENV
