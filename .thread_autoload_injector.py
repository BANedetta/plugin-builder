"""
–ú–Ω–µ –ª–µ–≥—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Python, —Ç–∞–∫ —á—Ç–æ –Ω–µ –≤–∞–º –º–µ–Ω—è —Å—É–¥–∏—Ç—å
"""

import re
from pathlib import Path

# –ü—É—Ç–∏
PLUGIN_PATH = Path(__file__).parent
AUTOLOAD_PATH = "autoload.php"
THREAD_CLASSES = [
	"Thread", "AsyncTask"
]
IGNORE_PATHES = [
	"vendor"
]
EXTRA_UP = {
	"virions": 1
}

def get_php_files(directory: Path):
	"""–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PHP —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	return list(directory.rglob("*.php"))

def get_class_from_file(file: Path):
	"""–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ –∏–∑ PHP —Ñ–∞–π–ª–∞."""
	try:
		content = file.read_text(encoding="utf-8")
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
		return None

	namespace_match = re.search(r'namespace\s+([^;]+);', content)
	namespace = namespace_match.group(1).strip() if namespace_match else ''

	class_match = re.search(r'class\s+(\w+)\s+extends\s+(\w+)', content)

	if class_match:
		class_name, parent_class = class_match.groups()
		full_class = f"{namespace}.{class_name}" if namespace else class_name

		return {
			"full_class": full_class,
			"parent_class": parent_class,
			"file": file
		}

	return None

def modify_on_run_method(file: Path, autoload_path: str):
	"""–î–æ–±–∞–≤–ª—è–µ—Ç require_once –≤ –º–µ—Ç–æ–¥ onRun, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç."""
	try:
		content = file.read_text(encoding="utf-8")
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
		return

	if "require_once" in content:
		print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (require_once —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç): {file}")
		return

	match = re.search(r'(?:public|protected)?\s*function\s+onRun\s*\(\s*\)\s*(?::\s*\w+)?\s*{?', content, re.MULTILINE)

	if match:
		insert_pos = match.end()
		new_content = content[:insert_pos] + f'\n\t\trequire_once __DIR__ . "/{autoload_path}";\n' + content[insert_pos:]

		try:
			file.write_text(new_content, encoding="utf-8")
			print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {file}")
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {file}: {e}")
	else:
		print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ onRun –≤ —Ñ–∞–π–ª–µ: {file}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
php_files = get_php_files(PLUGIN_PATH)
print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(php_files)} PHP —Ñ–∞–π–ª–æ–≤.")

for file in php_files:
	class_data = get_class_from_file(file)

	if class_data and class_data["parent_class"] in THREAD_CLASSES:
		# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞–ø–æ–∫
		if any(ignored in file.parts for ignored in IGNORE_PATHES):
			print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è –ø–∞–ø–∫–∞): {file}")
			continue

		namespace_parts = class_data["full_class"].split("\\")

		# –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ up –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –∏–∑ EXTRA_UP
		extra_up = sum(EXTRA_UP.get(part, 0) for part in file.parts)

		levels_up = len(namespace_parts) + extra_up
		autoload_path = ("../" * levels_up) + AUTOLOAD_PATH

		modify_on_run_method(file, autoload_path)

print("üéâ –ì–æ—Ç–æ–≤–æ!")
